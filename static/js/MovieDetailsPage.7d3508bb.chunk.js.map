{"version":3,"sources":["Service/ServiceApi.js","Images/default.jpg","Views/MovieDetailsPage/MovieDetailsPage.module.css","Views/MovieDetailsPage/MovieDetailsPage.js"],"names":["BASE_URL","API_KEY","getTrendingMovies","axios","get","getMovieDetails","movieId","getCast","getReviews","getMovieBySearch","searchQuery","module","exports","Reviews","lazy","Cast","MovieDetailsPage","useState","movie","setMovie","useParams","history","useHistory","location","useLocation","useRouteMatch","url","path","useEffect","then","data","window","scrollTo","top","document","documentElement","scrollHeight","behavior","catch","error","toast","poster_path","title","release_date","overview","vote_average","genres","className","s","imageContainer","type","onClick","push","state","from","btnGoBack","src","noImage","alt","width","descriptionContainer","descrItem","genreList","map","id","name","cast","activeClassName","active","to","pathname","reviews","fallback","Spinner"],"mappings":"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","file":"static/js/MovieDetailsPage.7d3508bb.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '5a0ea8669d169b89996fed3dc54f9383';\r\n\r\nexport const getTrendingMovies = () =>\r\n    axios.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\r\n\r\nexport const getMovieDetails = movieId =>\r\n    axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\r\n\r\nexport const getCast = movieId =>\r\n    axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\r\n\r\nexport const getReviews = movieId =>\r\n    axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\r\n\r\nexport const getMovieBySearch = searchQuery =>\r\n    axios.get(\r\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`,\r\n    );\r\n","export default __webpack_public_path__ + \"static/media/default.2e01288c.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGoBack\":\"MovieDetailsPage_btnGoBack__28pdK\",\"imageContainer\":\"MovieDetailsPage_imageContainer__1rMlK\",\"descriptionContainer\":\"MovieDetailsPage_descriptionContainer__1IeKy\",\"genreList\":\"MovieDetailsPage_genreList__Bc7FE\",\"descrItem\":\"MovieDetailsPage_descrItem__1kTa6\",\"cast\":\"MovieDetailsPage_cast__34m9Q\",\"reviews\":\"MovieDetailsPage_reviews__3gp1D\",\"active\":\"MovieDetailsPage_active__U_Vx2\"};","import { lazy, Suspense, useEffect, useState } from 'react';\r\nimport {\r\n    NavLink,\r\n    Route,\r\n    Switch,\r\n    useHistory,\r\n    useLocation,\r\n    useParams,\r\n    useRouteMatch,\r\n} from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport Spinner from '../../components/Spinner';\r\nimport noImage from '../../Images/default.jpg';\r\nimport { getMovieDetails } from '../../Service/ServiceApi';\r\nimport s from './MovieDetailsPage.module.css';\r\n\r\nconst Reviews = lazy(() =>\r\n    import('../Reviews' /*webpackChunkName: \"Reviews\"*/),\r\n);\r\nconst Cast = lazy(() => import('../Cast' /*webpackChunkName: \"Cast\" */));\r\n\r\nconst MovieDetailsPage = () => {\r\n    const [movie, setMovie] = useState({});\r\n    const { movieId } = useParams();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { url, path } = useRouteMatch();\r\n\r\n    useEffect(() => {\r\n        getMovieDetails(movieId)\r\n            .then(({ data }) => {\r\n                setMovie(data);\r\n\r\n                window.scrollTo({\r\n                    top: document.documentElement.scrollHeight,\r\n                    behavior: 'smooth',\r\n                });\r\n            })\r\n            .catch(error =>\r\n                toast.error('Something wrong! Please, try again later'),\r\n            );\r\n    }, [movieId]);\r\n\r\n    const onGoBack = () => {\r\n        history.push(location?.state?.from ?? '/');\r\n    };\r\n\r\n    const {\r\n        poster_path,\r\n        title,\r\n        release_date,\r\n        // tagline,\r\n        overview,\r\n        vote_average,\r\n        genres,\r\n    } = movie;\r\n\r\n    return (\r\n        <section>\r\n            <div className={s.imageContainer}>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={onGoBack}\r\n                    className={s.btnGoBack}\r\n                >\r\n                    Go back\r\n                </button>\r\n                <img\r\n                    src={\r\n                        poster_path\r\n                            ? `https://image.tmdb.org/t/p/w500/${poster_path}`\r\n                            : noImage\r\n                    }\r\n                    alt={title}\r\n                    width=\"400\"\r\n                />\r\n            </div>\r\n\r\n            <div className={s.descriptionContainer}>\r\n                <p className={s.descrItem}>{title}</p>\r\n                <p className={s.descrItem}>Date of release: {release_date}</p>\r\n                {genres && (\r\n                    <ul className={s.genreList}>\r\n                        Genres:\r\n                        {genres.map(({ id, name }) => (\r\n                            <li key={id}>\r\n                                <span>{name}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n                <p className={s.descrItem}>Average vote: {vote_average}</p>\r\n                {/* <p className={s.descrItem}>Slogan: {tagline}</p> */}\r\n                <p className={s.descrItem}>{overview}</p>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <nav className={s.descriptionContainer}>\r\n                <h3>Additional information</h3>\r\n                <NavLink\r\n                    className={s.cast}\r\n                    activeClassName={s.active}\r\n                    to={{\r\n                        pathname: `${url}/cast`,\r\n                        state: { from: location?.state?.from },\r\n                    }}\r\n                >\r\n                    Cast\r\n                </NavLink>\r\n                <NavLink\r\n                    className={s.reviews}\r\n                    activeClassName={s.active}\r\n                    to={{\r\n                        pathname: `${url}/reviews`,\r\n                        state: { from: location?.state?.from },\r\n                    }}\r\n                >\r\n                    Reviews\r\n                </NavLink>\r\n            </nav>\r\n            <Suspense fallback={<Spinner />}>\r\n                <Switch>\r\n                    <Route path={`${path}:movieId/cast`}>\r\n                        <Cast movieId={movieId} />\r\n                    </Route>\r\n                    <Route path={`${path}:movieId/reviews`}>\r\n                        <Reviews movieId={movieId} />\r\n                    </Route>\r\n                </Switch>\r\n            </Suspense>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n"],"sourceRoot":""}